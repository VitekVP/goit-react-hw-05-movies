{"version":3,"file":"static/js/387.2f0f352b.chunk.js","mappings":"wQAEaA,EAAWC,EAAAA,GAAAA,GAAH,sGAQRC,EAAeD,EAAAA,GAAAA,GAAH,yQAgBZE,EAAWF,EAAAA,GAAAA,IAAH,0CAIRG,EAAWH,EAAAA,GAAAA,IAAH,iFAMRI,EAAOJ,EAAAA,GAAAA,EAAH,6FAOJK,EAAYL,EAAAA,GAAAA,EAAH,4C,mBCiBtB,EA7Ca,WACX,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAWA,OATAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAgBR,GACbS,MAAK,SAAAC,GAEJN,EAAQM,EAASC,KAAKR,KACvB,IACAS,OAAM,SAAAP,GAAK,OAAIC,EAASD,EAAMQ,SAAnB,GACf,GAAE,CAACb,KAGF,gCACGK,IAAS,SAACS,EAAA,EAAD,CAAWC,QAASV,IAC7BF,EAAKa,OAAS,GACb,SAACvB,EAAD,UACGU,EAAKc,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,cAAeC,EAAvC,EAAuCA,aAAvC,OACR,UAAC3B,EAAD,YACE,SAACC,EAAD,CACE2B,IACED,EAAY,yCAC0BA,GAClCE,EAENC,IAAKJ,KAEP,UAACxB,EAAD,YACE,SAACC,EAAD,UAAOsB,GAAc,SACrB,UAACrB,EAAD,YACE,uBAAG,eAAc,IAAEoB,GAAwB,MAAO,YAZrCD,EADX,OAoBZ,SAACJ,EAAA,EAAD,CAAWC,QAAQ,qBAI1B,C,sECxDYW,E,QAAMhC,GAAAA,EAAH,qE,SCEHoB,EAAY,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC1B,OACE,+BACE,SAACW,EAAD,UAAMX,KAGX,C,iMCRKY,EAAW,+BACXC,EAAU,mCAEHC,EAAiB,mCAAG,oGACRC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFb,cACzBlB,EADyB,yBAIxBA,GAJwB,2CAAH,qDAOjBqB,EAAY,mCAAG,WAAM/B,GAAN,uFACH8B,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACA3B,EADA,oBACmB4B,IAFhB,cACpBlB,EADoB,yBAInBA,GAJmB,2CAAH,sDAOZF,EAAe,mCAAG,WAAMR,GAAN,uFACN8B,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACA3B,EADA,4BAC2B4B,IAFrB,cACvBlB,EADuB,yBAItBA,GAJsB,2CAAH,sDAOfsB,EAAe,mCAAG,WAAMhC,GAAN,uFACN8B,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACA3B,EADA,4BAC2B4B,IAFrB,cACvBlB,EADuB,yBAItBA,GAJsB,2CAAH,sDAOfuB,EAAkB,mCAAG,WAAMC,GAAN,uFACTJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBACgCM,EADhC,yBADS,cAC1BxB,EAD0B,yBAIzBA,GAJyB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/NoServise/NoServise.styled.js","components/NoServise/NoServise.jsx","themoviedbAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  margin-bottom: 20px;\n\n  display: flex;\n  gap: 16px;\n  flex-wrap: wrap;\n`;\n\nexport const CastListItem = styled.li`\n  flex-basis: calc((100% - 80px) / 6);\n\n  display: flex;\n  flex-direction: column;\n\n  box-shadow: 0px 0px 4px 1px #2e2e2ebf;\n\n  transition: transform 300ms linear;\n  overflow: hidden;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n\nexport const CastFoto = styled.img`\n  height: 248px;\n`;\n\nexport const CastInfo = styled.div`\n  padding: 10px 2px 10px;\n\n  background-color: white;\n`;\n\nexport const Name = styled.p`\n  margin-bottom: 8px;\n\n  text-align: center;\n  font-weight: 700;\n`;\n\nexport const Character = styled.p`\n  font-size: 14px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\n\nimport { getCreditsMovie } from '../../themoviedbAPI';\nimport image from '../../image/image.jpg';\nimport {\n  CastFoto,\n  CastInfo,\n  CastList,\n  CastListItem,\n  Name,\n  Character,\n} from './Cast.styled';\nimport { NoServise } from 'components/NoServise/NoServise';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getCreditsMovie(movieId)\n      .then(response => {\n        // console.log(response.data.cast);\n        setCast(response.data.cast);\n      })\n      .catch(error => setError(error.toJSON()));\n  }, [movieId]);\n\n  return (\n    <>\n      {error && <NoServise message={error} />}\n      {cast.length > 0 ? (\n        <CastList>\n          {cast.map(({ id, character, name, original_name, profile_path }) => (\n            <CastListItem key={id}>\n              <CastFoto\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : image\n                }\n                alt={original_name}\n              />\n              <CastInfo>\n                <Name>{name ? name : '...'}</Name>\n                <Character>\n                  <b>character:</b> {character ? character : '...'}{' '}\n                </Character>\n              </CastInfo>\n            </CastListItem>\n          ))}\n        </CastList>\n      ) : (\n        <NoServise message=\"cast not found\" />\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const Box = styled.p`\n  font-size: 20px;\n\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\n\nimport { Box } from './NoServise.styled';\n\nexport const NoServise = ({ message }) => {\n  return (\n    <>\n      <Box>{message}</Box>\n    </>\n  );\n};\n\nNoServise.propTypes = {\n  message: PropTypes.node,\n};\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '45d68bd879a3e756f01bd66285287115';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response;\n};\n\nexport const getMovieById = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n  return response;\n};\n\nexport const getCreditsMovie = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response;\n};\n\nexport const getReviewsMovie = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response;\n};\n\nexport const gethMoviesBySearch = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false`\n  );\n  return response;\n};\n"],"names":["CastList","styled","CastListItem","CastFoto","CastInfo","Name","Character","movieId","useParams","useState","cast","setCast","error","setError","useEffect","getCreditsMovie","then","response","data","catch","toJSON","NoServise","message","length","map","id","character","name","original_name","profile_path","src","image","alt","Box","BASE_URL","API_KEY","getTrendingMovies","axios","getMovieById","getReviewsMovie","gethMoviesBySearch","query"],"sourceRoot":""}